{"remainingRequest":"D:\\io\\chengbocd.github.io\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\io\\chengbocd.github.io\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\io\\chengbocd.github.io\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!D:\\io\\chengbocd.github.io\\node_modules\\@vuepress\\markdown-loader\\index.js??ref--1-2!D:\\io\\chengbocd.github.io\\docs\\posts\\2018-11-9-git.md?vue&type=template&id=037dc0c6&","dependencies":[{"path":"D:\\io\\chengbocd.github.io\\docs\\posts\\2018-11-9-git.md","mtime":1596437439967},{"path":"D:\\io\\chengbocd.github.io\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\io\\chengbocd.github.io\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\io\\chengbocd.github.io\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\io\\chengbocd.github.io\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\io\\chengbocd.github.io\\node_modules\\@vuepress\\markdown-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}